# -*- coding: utf-8 -*-
"""Artificial Neural Network Car Sale Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ter1r8mex_aCD57woNYWgHiPQoRcEOZM

#Libraries Import
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

"""#Import Dataset"""

car_df = pd.read_csv('Car_Purchasing_Data.csv', encoding='ISO-8859-1')

car_df

car_df.head(20)

car_df.tail(5)

"""#Visualization of the dataset"""

sns.pairplot(car_df)

"""#Creating the training and tesing data"""

X=car_df.drop(['Customer Name', 'Customer e-mail', 'Country','Car Purchase Amount'], axis=1)

X

y=car_df['Car Purchase Amount']

y

"""#Detecting the shape"""

X.shape

y.shape

"""#Normalization"""

from sklearn.preprocessing import MinMaxScaler
scaler=MinMaxScaler()
X_scaled=scaler.fit_transform(X)

X_scaled

X_scaled.shape

scaler.data_max_

scaler.data_min_

y1=y.values.reshape(-1,1)

y_scaled=scaler.fit_transform(y1)

y_scaled

"""#Model Training"""

X_scaled.shape

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test=train_test_split(X_scaled, y_scaled, test_size=0.25)

X_train.shape

X_test.shape

import tensorflow.keras
from keras.models import Sequential
from keras.layers import Dense


model=Sequential()
model.add(Dense(40, input_dim=5, activation='relu'))
model.add(Dense(40, activation='relu'))
model.add(Dense(1, activation='linear'))

model.summary()

model.compile(optimizer='adam', loss='mean_squared_error')

epochs_hist=model.fit(X_train, y_train, epochs=100,batch_size=50, verbose=1, validation_steps=0.2)

epochs_hist.history.keys()

plt.plot(epochs_hist.history['loss'])
plt.title('Model loss Progress Durinh Training')
plt.ylabel('Training and Validation Loss')
plt.xlabel('Epoch number')
plt.legend(['Training Loss'])

#Gender, Age, Annual Salary, Credit Card Dept, Net worth
X_test=  np.array([[1,50, 50000, 10000, 600000]])
y_predict=model.predict(X_test)

print('Expected Purchase Amount', y_predict)

from sklearn.metrics import accuracy_score

